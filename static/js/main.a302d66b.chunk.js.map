{"version":3,"sources":["store/employers/types.js","store/employers/reducer.js","store/rootReducer.js","store/index.js","store/employers/action.js","components/input/Radio.jsx","components/employer/employer.jsx","components/employer/EmployerNone.jsx","components/employers/Employers.jsx","components/config/config.js","components/config/configMonth.js","components/birthday/Birthday.jsx","components/birthday/NoBirthday.jsx","components/employerActive/employersActive.jsx","components/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["GET_EMPLOYERS_INIT","GET_EMPLOYERS_ERROR","GET_EMPLOYERS_SUCCESS","ADD_EMPLOYER","REMOVE_EMPLOYER","initialState","employers","isEmployersLoading","error","employersActive","rootReducer","combineReducers","state","action","type","payload","filter","employer","isActive","map","id","store","createStore","applyMiddleware","thunk","getEmployersSuccess","checkEmployers","storage","activeEmployers","some","onChangeAdd","getState","find","JSON","parse","localStorage","getItem","push","setItem","stringify","onChangeRemove","newActive","RadioInput","props","name","text","anotherText","className","onChange","value","checked","Employer","connect","dispatch","firstName","lastName","EmployerNone","Employers","letter","length","config","configMonth","Birthday","month","date","Date","dob","day","getDate","year","getFullYear","NoBirthday","EmployersActive","employersActiveList","Home","isLoading","active","notActive","currentMonth","getMonth","orderedMonths","slice","includes","sort","a","b","onchangeAdd","index","getEmployers","fetch","response","json","localActive","updatedEmployers","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a302d66b.chunk.js","sourcesContent":["export const GET_EMPLOYERS_INIT = 'GET_EMPLOYERS_INIT'\r\nexport const GET_EMPLOYERS_ERROR = 'GET_EMPLOYERS_ERROR'\r\nexport const GET_EMPLOYERS_SUCCESS = 'GET_EMPLOYERS_SUCCESS'\r\nexport const ADD_EMPLOYER = 'ADD_EMPLOYER'\r\nexport const REMOVE_EMPLOYER = 'REMOVE_EMPLOYER'","import { GET_EMPLOYERS_ERROR, GET_EMPLOYERS_INIT, GET_EMPLOYERS_SUCCESS, ADD_EMPLOYER, REMOVE_EMPLOYER } from './types'\r\n\r\nconst initialState = {\r\n    employers: [],\r\n    isEmployersLoading: false,\r\n    error: null,\r\n    employersActive: [],\r\n}\r\n\r\nexport const employersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_EMPLOYERS_INIT:\r\n            return {\r\n                ...state,\r\n                isEmployersLoading: true,\r\n                error: null,\r\n            }\r\n        case GET_EMPLOYERS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                employers: action.payload,\r\n                isEmployersLoading: false,\r\n                employersActive: action.payload.filter(employer => employer.isActive)\r\n            }\r\n        case GET_EMPLOYERS_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        case ADD_EMPLOYER:\r\n            return {\r\n                ...state,\r\n                employers: state.employers.map(employer => {\r\n                    if (employer.id === action.payload.id) {\r\n                        return { ...employer, isActive: !employer.isActive }\r\n                    }\r\n                    return employer\r\n                }),\r\n                employersActive: [...state.employersActive, action.payload,]\r\n            }\r\n        case REMOVE_EMPLOYER:\r\n            return {\r\n                ...state,\r\n                employers: state.employers.map(employer => {\r\n                    if (employer.id === action.payload.id) {\r\n                        return { ...employer, isActive: !employer.isActive }\r\n                    }\r\n                    return employer\r\n                }),\r\n                employersActive: state.employersActive.filter(employer => employer.id !== action.payload.id)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport { employersReducer } from \"./employers/reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    employers: employersReducer,\r\n});","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from \"./rootReducer\";\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import {\r\n    GET_EMPLOYERS_ERROR,\r\n    GET_EMPLOYERS_INIT,\r\n    GET_EMPLOYERS_SUCCESS,\r\n    ADD_EMPLOYER,\r\n    REMOVE_EMPLOYER,\r\n} from './types'\r\nimport { store } from '../index'\r\n\r\nconst getEmployersError = (error) => {\r\n    return {\r\n        type: GET_EMPLOYERS_ERROR,\r\n        payload: error,\r\n    }\r\n}\r\n\r\nconst getEmployersInit = () => {\r\n    return {\r\n        type: GET_EMPLOYERS_INIT\r\n    }\r\n}\r\n\r\nconst getEmployersSuccess = (employers) => {\r\n    return {\r\n        type: GET_EMPLOYERS_SUCCESS,\r\n        payload: employers,\r\n    }\r\n}\r\n\r\nconst checkEmployers = (employers, storage) => {\r\n    const updatedEmployers = employers.map((employer) => {\r\n        const activeEmployers = storage.some(({ id }) => (id === employer.id))\r\n        return { ...employer, isActive: activeEmployers, }\r\n    })\r\n    return updatedEmployers\r\n}\r\n\r\nexport const onChangeAdd = (id) => {\r\n    const state = store.getState()\r\n    const employers = state.employers.employers\r\n    const employer = { ...employers.find((employer) => employer.id === id), isActive: true }\r\n    const storage = JSON.parse(localStorage.getItem(\"active\"))\r\n    storage.push(employer)\r\n    localStorage.setItem(\"active\", JSON.stringify(storage))\r\n    return {\r\n        type: ADD_EMPLOYER,\r\n        payload: employer\r\n    }\r\n}\r\n\r\nexport const onChangeRemove = (id) => {\r\n    const state = store.getState()\r\n    const employers = state.employers.employers\r\n    const localActive = JSON.parse(localStorage.getItem('active'));\r\n    const newActive = localActive.filter((employers,) => {\r\n        return id !== employers.id;\r\n    })\r\n    localStorage.setItem('active', JSON.stringify(newActive))\r\n    const employer = { ...employers.find((employer) => employer.id === id), isActive: false }\r\n    return {\r\n        type: REMOVE_EMPLOYER,\r\n        payload: employer\r\n    }\r\n}\r\n\r\nexport const getEmployers = () => async (dispatch) => {\r\n    dispatch(getEmployersInit())\r\n    if (!localStorage.getItem('active')) {\r\n        localStorage.setItem('active', JSON.stringify([]))\r\n    }\r\n    try {\r\n        const response = await fetch('https://yalantis-react-school-api.yalantis.com/api/task0/users');\r\n        const employers = await response.json();\r\n        const localActive = JSON.parse(localStorage.getItem('active'))\r\n        const updatedEmployers = checkEmployers(employers, localActive)\r\n        dispatch(getEmployersSuccess(updatedEmployers))\r\n    } catch (error) {\r\n        dispatch(getEmployersError(error))\r\n    }\r\n}","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport \"../styles.scss\"\r\n\r\nexport const RadioInput = (props) => {\r\n\tconst { onChangeAdd, onChangeRemove, name, text, anotherText, id, isActive } =\r\n\t\tprops\r\n\treturn (\r\n\t\t<form className=\"form\">\r\n\t\t\t<p className=\"text\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tonChange={() => onChangeRemove(id)}\r\n\t\t\t\t\ttype=\"radio\"\r\n\t\t\t\t\tvalue=\"not-active\"\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tchecked={!isActive}\r\n\t\t\t\t/>\r\n\t\t\t\t{anotherText}\r\n\t\t\t</p>\r\n\t\t\t<p className=\"text\">\r\n\t\t\t\t<input\r\n\t\t\t\t\tonChange={() => onChangeAdd(id)}\r\n\t\t\t\t\ttype=\"radio\"\r\n\t\t\t\t\tvalue=\"active\"\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tchecked={isActive}\r\n\t\t\t\t/>\r\n\t\t\t\t{text}\r\n\t\t\t</p>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nRadioInput.propTypes = {\r\n\ttext: PropTypes.string,\r\n\tonchangeAdd: PropTypes.func,\r\n}\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { RadioInput } from \"../input/Radio\"\r\nimport { onChangeAdd, onChangeRemove } from \"../../store/employers/action\"\r\nimport \"../styles.scss\"\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonChangeAdd: (id) => dispatch(onChangeAdd(id)),\r\n\t\tonChangeRemove: (id) => dispatch(onChangeRemove(id)),\r\n\t}\r\n}\r\n\r\nexport const Employer = connect(\r\n\tnull,\r\n\tmapDispatchToProps\r\n)((props) => {\r\n\tconst { employer, onChangeAdd, onChangeRemove } = props\r\n\tconst id = employer.id\r\n\treturn (\r\n\t\t<div className=\"item\">\r\n\t\t\t<p className={employer.isActive ? \"active\" : \"\"}>\r\n\t\t\t\t{employer.firstName} {employer.lastName}\r\n\t\t\t</p>\r\n\t\t\t<RadioInput\r\n\t\t\t\ttext=\"active\"\r\n\t\t\t\tanotherText=\"not-active\"\r\n\t\t\t\tname=\"employer\"\r\n\t\t\t\tisActive={employer.isActive}\r\n\t\t\t\tonChangeAdd={() => onChangeAdd(id)}\r\n\t\t\t\tonChangeRemove={() => onChangeRemove(id)}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n})\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport \"../styles.scss\"\r\n\r\nexport const EmployerNone = (props) => {\r\n\tconst { text } = props\r\n\treturn (\r\n\t\t<div className=\"item\">\r\n\t\t\t<p className=\"text\">{text}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nEmployerNone.propTypes = {\r\n\ttext: PropTypes.string,\r\n}\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Employer } from \"../employer/employer\"\r\nimport { EmployerNone } from \"../employer/EmployerNone\"\r\nimport \"../styles.scss\"\r\n\r\nexport const Employers = (props) => {\r\n\tconst { employers, letter } = props\r\n\treturn (\r\n\t\t<div className=\"column\">\r\n\t\t\t<h4>{letter}</h4>\r\n\t\t\t{employers.length ? (\r\n\t\t\t\temployers.map((employer) => (\r\n\t\t\t\t\t<div key={employer.id}>\r\n\t\t\t\t\t\t<Employer employer={employer} letter={letter} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))\r\n\t\t\t) : (\r\n\t\t\t\t<EmployerNone text=\"No Employees\" />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nEmployers.propTypes = {\r\n\ttext: PropTypes.string,\r\n}\r\n","export const config = [\r\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\",\r\n    \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\r\n\r\nexport default config","export const configMonth = [\r\n    \"January\", \r\n    \"February\", \r\n    \"March\", \r\n    \"April\", \r\n    \"May\", \r\n    \"June\", \r\n    \"Jully\", \r\n    \"August\", \r\n    \"September\", \r\n    \"October\", \r\n    \"November\", \r\n    \"December\"]","import React from \"react\"\r\n\r\nexport const Birthday = (props) => {\r\n\tconst { employer, month } = props\r\n\tconst date = new Date(employer.dob)\r\n\tconst day = date.getDate()\r\n\tconst year = date.getFullYear()\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>\r\n\t\t\t\t{employer.firstName} {employer.lastName} - {day} {month}, {year} year\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from \"react\"\r\n\r\nexport const NoBirthday = (props) => {\r\n\tconst { text } = props\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>{text}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from \"react\"\r\nimport { Birthday } from \"../birthday/Birthday\"\r\nimport { NoBirthday } from \"../birthday/NoBirthday\"\r\n\r\nexport const EmployersActive = (props) => {\r\n\tconst { month, employersActiveList } = props\r\n\treturn (\r\n\t\t<div className=\"employersActiveList\">\r\n\t\t\t<h4>{month}</h4>\r\n\t\t\t{employersActiveList.length ? (\r\n\t\t\t\temployersActiveList.map((employer) => (\r\n\t\t\t\t\t<Birthday employer={employer} month={month} />\r\n\t\t\t\t))\r\n\t\t\t) : (\r\n\t\t\t\t<NoBirthday text=\"List is empty\" />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Employers } from \"./employers/Employers\"\r\nimport { config } from \"./config/config\"\r\nimport { configMonth } from \"./config/configMonth.js\"\r\nimport { EmployersActive } from \"./employerActive/employersActive\"\r\nimport \"./styles.scss\"\r\nimport { onChangeAdd, onChangeRemove } from \"../store/employers/action\"\r\n\r\nconst mapStateToProps = (store) => {\r\n\treturn {\r\n\t\temployers: store.employers.employers,\r\n\t\tisLoading: store.employers.isEmployersLoading,\r\n\t\terror: store.employers.error,\r\n\t\temployersActive: store.employers.employersActive,\r\n\t\tactive: store.employers.active,\r\n\t\tnotActive: store.employers.notActive,\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonChangeAdd: (id) => dispatch(onChangeAdd(id)),\r\n\t\tonChangeRemove: (id) => dispatch(onChangeRemove(id)),\r\n\t}\r\n}\r\n\r\nexport const Home = connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)((props) => {\r\n\tconst date = new Date()\r\n\tconst currentMonth = date.getMonth()\r\n\tconst orderedMonths = [\r\n\t\t...configMonth.slice(currentMonth),\r\n\t\t...configMonth.slice(0, currentMonth),\r\n\t]\r\n\tconst { employers, employersActive } = props\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"column-left\">\r\n\t\t\t\t\t<h2>Employees</h2>\r\n\t\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t\t{config.map((letter) => (\r\n\t\t\t\t\t\t\t<Employers\r\n\t\t\t\t\t\t\t\temployers={employers\r\n\t\t\t\t\t\t\t\t\t.filter((employer) => employer.firstName.includes(letter))\r\n\t\t\t\t\t\t\t\t\t.sort((a, b) => (a.firstName > b.firstName ? 1 : -1))}\r\n\t\t\t\t\t\t\t\tletter={letter}\r\n\t\t\t\t\t\t\t\tonchangeAdd={() => onChangeAdd()}\r\n\t\t\t\t\t\t\t\tonChangeRemove={() => onChangeRemove()}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"column-right\">\r\n\t\t\t\t\t<h2>Employees birthday</h2>\r\n\t\t\t\t\t<div className=\"employersBirthday\">\r\n\t\t\t\t\t\t{employersActive.length ? (\r\n\t\t\t\t\t\t\torderedMonths.map((month, index) => (\r\n\t\t\t\t\t\t\t\t<EmployersActive\r\n\t\t\t\t\t\t\t\t\temployersActiveList={employersActive\r\n\t\t\t\t\t\t\t\t\t\t.filter((employer) => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn new Date(employer.dob).getMonth() === index\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t.sort((a, b) => (a.dob > b.dob ? 1 : -1))}\r\n\t\t\t\t\t\t\t\t\tmonth={month}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<p>Employees List is empty</p>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n})\r\n","import './App.css';\nimport { connect } from 'react-redux'\nimport { useEffect } from 'react'\nimport { getEmployers as getEmployersAction } from \"./store/employers/action\";\nimport { Home } from \"./components/Home\"\n\nfunction App(props) {\n  useEffect(() => {\n    props.getEmployers()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nconst mapStateToProps = (store) => {\n  return {\n    employers: store.employers.employers,\n    isLoading: store.employers.isEmployersLoading,\n    error: store.employers.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getEmployers: () => dispatch(getEmployersAction()),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}